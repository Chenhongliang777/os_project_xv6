Question 1: Which registers contain arguments to functions? For example, which register holds 13 in main’s call to printf? 
Answer 1: a1, a2, a3 等通用寄存器；13 被寄存器 a2 保存。

Question 2: Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
Answer 2: main 的汇编代码没有调用 f 和 g 函数。编译器对其进行了优化。

Question 3: At what address is the function printf located?
Answer 3: 0x630

Question 4:  What value is in the register ra just after the jalr to printf in main?
Answer 4: jalr 指令执行完毕之后，ra 的值为 0x38.

Question 5: Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
What is the output? Here's an ASCII table that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
Here's a description of little- and big-endian and a more whimsical description.
Answer 5: ：如果在大端序，i 的值应该为 0x00646c72 才能保证与小端序输出的内容相同。不用改变 57616 的值。

Question 6:  In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen
    
    printf("x=%d y=%d", 3);

Answer 6: y= 之后的值为一个不确定的值。




